# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2022-05-11 22:24
from __future__ import unicode_literals

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=35)),
                ('district', models.CharField(db_column='District', max_length=20)),
                ('population', models.IntegerField(db_column='Population')),
            ],
            options={
                'db_table': 'city',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('code', models.CharField(db_column='Code', max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=52)),
                ('continent', models.CharField(db_column='Continent', max_length=13)),
                ('region', models.CharField(db_column='Region', max_length=26)),
                ('surfacearea', models.FloatField(db_column='SurfaceArea')),
                ('indepyear', models.SmallIntegerField(blank=True, db_column='IndepYear', null=True)),
                ('population', models.IntegerField(db_column='Population')),
                ('lifeexpectancy', models.FloatField(blank=True, db_column='LifeExpectancy', null=True)),
                ('gnp', models.FloatField(blank=True, db_column='GNP', null=True)),
                ('gnpold', models.FloatField(blank=True, db_column='GNPOld', null=True)),
                ('localname', models.CharField(db_column='LocalName', max_length=45)),
                ('governmentform', models.CharField(db_column='GovernmentForm', max_length=45)),
                ('headofstate', models.CharField(blank=True, db_column='HeadOfState', max_length=60, null=True)),
                ('capital', models.IntegerField(blank=True, db_column='Capital', null=True)),
                ('code2', models.CharField(db_column='Code2', max_length=2)),
            ],
            options={
                'db_table': 'country',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_COUPON',
            fields=[
                ('start_date', models.DateField(db_column='start_date', null=True)),
                ('end_date', models.DateField(db_column='end_date', null=True)),
                ('coupon_id', models.IntegerField(db_column='coupon_id', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(9999999999)])),
                ('percentage', models.IntegerField(db_column='percentage', validators=[django.core.validators.MaxValueValidator(999)])),
            ],
            options={
                'db_table': 'YCL_COUPON',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_CUSTOMER',
            fields=[
                ('customer_id', models.IntegerField(db_column='customer_id', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(9999999999)])),
                ('type', models.CharField(db_column='type', max_length=1)),
                ('email', models.CharField(db_column='email', max_length=30)),
                ('phone_number', models.CharField(db_column='phone_number', max_length=15)),
                ('ad_city', models.CharField(db_column='ad_city', max_length=10)),
                ('ad_street', models.CharField(db_column='ad_street', max_length=20)),
                ('ad_country', models.CharField(db_column='ad_country', max_length=15)),
                ('ad_zipcode', models.IntegerField(db_column='ad_zipcode', validators=[django.core.validators.MaxValueValidator(9999999999)])),
            ],
            options={
                'db_table': 'YCL_CUSTOMER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_EMPLOYEE',
            fields=[
                ('employee_id', models.IntegerField(db_column='employee_id', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(99999)])),
                ('employee_firstname', models.CharField(db_column='employee_firstname', max_length=10)),
                ('employee_lasttname', models.CharField(db_column='employee_lastname', max_length=10)),
            ],
            options={
                'db_table': 'YCL_EMPLOYEE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_INSURANCE',
            fields=[
                ('insurance_policy_no', models.IntegerField(db_column='insurance_policy_no', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(9999999999)])),
                ('insurance_company', models.CharField(db_column='insurance_company', max_length=10)),
            ],
            options={
                'db_table': 'YCL_INSURANCE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_LOCATION',
            fields=[
                ('city', models.CharField(db_column='city', max_length=10)),
                ('street', models.CharField(db_column='street', max_length=20)),
                ('zipcode', models.IntegerField(db_column='zipcode', validators=[django.core.validators.MaxValueValidator(9999999999)])),
                ('country', models.CharField(db_column='country', max_length=15)),
                ('phone_number', models.CharField(db_column='phone_number', max_length=15)),
                ('location_id', models.IntegerField(db_column='location_id', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(9999)])),
            ],
            options={
                'db_table': 'YCL_LOCATION',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_NEIGHBORHOOD',
            fields=[
                ('neighborhood_id', models.IntegerField(db_column='neighborhood_id', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(99999)])),
                ('neighborhood_firstname', models.CharField(db_column='neighborhood_firstname', max_length=10)),
                ('neighborhood_lasttname', models.CharField(db_column='neighborhood_lasttname', max_length=10)),
            ],
            options={
                'db_table': 'YCL_RENTALRATE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_RENTALRATE',
            fields=[
                ('classs', models.CharField(db_column='class', max_length=20, primary_key=True, serialize=False)),
                ('fee_for_over', models.IntegerField(db_column='fee_for_over', validators=[django.core.validators.MaxValueValidator(99999)])),
                ('rentalrate', models.IntegerField(db_column='rentalrate', validators=[django.core.validators.MaxValueValidator(99999)])),
            ],
            options={
                'db_table': 'YCL_RENTALRATE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_SERVICE',
            fields=[
                ('pickup_date', models.DateField(db_column='piclup_date')),
                ('dropoff_date', models.DateField(db_column='dropoff_date')),
                ('start_odometer', models.DecimalField(decimal_places=3, max_digits=10)),
                ('end_odometer', models.DecimalField(decimal_places=3, max_digits=10)),
                ('odometer_limit', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('service_id', models.IntegerField(db_column='service_id', primary_key=True, serialize=False, validators=[django.core.validators.MaxValueValidator(99999)])),
                ('invoice_date', models.DateField(db_column='invoice_date')),
                ('pickloc_id', models.IntegerField(db_column='pickloc_id', validators=[django.core.validators.MaxValueValidator(9999)])),
                ('droploc_id', models.IntegerField(db_column='droploc_id', validators=[django.core.validators.MaxValueValidator(9999)])),
            ],
            options={
                'db_table': 'YCL_SERVICE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_Vehicle',
            fields=[
                ('VIN', models.CharField(db_column='VIN', max_length=10, primary_key=True, serialize=False)),
                ('LPN', models.IntegerField(db_column='LPN', validators=[django.core.validators.MaxValueValidator(9999999999)])),
                ('make', models.CharField(db_column='make', max_length=10)),
                ('model', models.CharField(db_column='model', max_length=10)),
                ('year', models.IntegerField(db_column='year', validators=[django.core.validators.MaxValueValidator(9999)])),
            ],
            options={
                'db_table': 'YCL_VEHICLE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Countrylanguage',
            fields=[
                ('countrycode', models.ForeignKey(db_column='CountryCode', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.Country')),
                ('language', models.CharField(db_column='Language', max_length=30)),
                ('isofficial', models.CharField(db_column='IsOfficial', max_length=1)),
                ('percentage', models.FloatField(db_column='Percentage')),
            ],
            options={
                'db_table': 'countrylanguage',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_CORPORATE',
            fields=[
                ('customer_id', models.ForeignKey(db_column='custome_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.YCL_CUSTOMER')),
                ('reg_num', models.IntegerField(db_column='reg_num', unique=True, validators=[django.core.validators.MaxValueValidator(99999999999999999999)])),
                ('detail_of_name', models.CharField(db_column='detail_of_name', max_length=15)),
            ],
            options={
                'db_table': 'YCL_CORPORATE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_CREDITCARD',
            fields=[
                ('payment_type', models.ForeignKey(db_column='payment_type', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.YCL_PAYMENT')),
                ('service_id', models.ForeignKey(db_column='service_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, to='world.YCL_SERVICE')),
                ('creditcard_no', models.IntegerField(db_column='creditcard_no', validators=[django.core.validators.MaxValueValidator(999999999999999)])),
            ],
            options={
                'db_table': 'YCL_CREDITCARD',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_DEBITCARD',
            fields=[
                ('payment_type', models.ForeignKey(db_column='payment_type', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.YCL_PAYMENT')),
                ('service_id', models.ForeignKey(db_column='service_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, to='world.YCL_SERVICE')),
                ('debitcard_no', models.IntegerField(db_column='debitcard_no', validators=[django.core.validators.MaxValueValidator(9999999999999999)])),
            ],
            options={
                'db_table': 'YCL_DEBITCARD',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_GIFTCARD',
            fields=[
                ('payment_type', models.ForeignKey(db_column='payment_type', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.YCL_PAYMENT')),
                ('service_id', models.ForeignKey(db_column='service_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, to='world.YCL_SERVICE')),
                ('giftcard_no', models.IntegerField(db_column='giftcard_no', validators=[django.core.validators.MaxValueValidator(9999999999)])),
            ],
            options={
                'db_table': 'YCL_GIFTCARD',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_IND_INS',
            fields=[
                ('driver_license_num', models.ForeignKey(db_column='driver_license_num', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.YCL_INDIVIDUAL')),
                ('insurance_policy_no', models.ForeignKey(db_column='insurance_policy_no', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, to='world.YCL_INSURANCE')),
            ],
            options={
                'db_table': 'YCL_IND_INS',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_INDIVIDUAL',
            fields=[
                ('customer_id', models.ForeignKey(db_column='customer_id', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='world.YCL_CUSTOMER')),
                ('FNAME', models.CharField(db_column='FNAME', max_length=10, primary_key=True)),
                ('LNAME', models.CharField(db_column='LNAME', max_length=10, primary_key=True)),
                ('driver_license_num', models.IntegerField(db_column='diver_license_num', unique=True, validators=[django.core.validators.MaxValueValidator(9999999999)])),
            ],
            options={
                'db_table': 'YCL_INDIVIDUAL',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='YCL_PAYMENT',
            fields=[
                ('payment_type', models.CharField(db_column='payment_type', max_length=1, primary_key=True, serialize=False)),
                ('service_id', models.ForeignKey(db_column='service', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, to='world.YCL_SERVICE')),
            ],
            options={
                'db_table': 'YCL_PAYMENT',
                'managed': False,
            },
        ),
    ]
